<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE article PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
                  "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<article>
  <articleinfo>
    <title>Git To Book</title>
    <subtitle>Git To Book</subtitle>
    <author>
      <firstname>Dennis</firstname>
      <surname>Iversen</surname>
    </author>
  </articleinfo>
<chapter id="git-to-book">
  <title>Git to Book</title>
  <sect1 id="quickstart">
    <title>Quickstart</title>
    <para>
      <emphasis role="strong">Gittobook</emphasis> (git-to-book) is an
      easy way to write to multiple formats using Markdown. It is
      basically a bridge between
      <emphasis role="strong">pandoc</emphasis>
      (<ulink url="http://pandoc.org">http://pandoc.org</ulink>) and
      <emphasis role="strong">git</emphasis>. Pandoc is used to generate
      the different formats, and git repos are used to store the written
      markdown files, and assets, such as pandoc templates and css and
      images. There is a online demo version, which you can log in to
      using a facebook or google account. This can be found on
      <ulink url="http://gittobook.org">http://gittobook.org</ulink>.
      The online version will export to Epub, Mobi and HTML. If you
      install it on your own server you will be able to export to any
      kind of format supported by pandoc, e.g. PDF.
    </para>
    <para>
      When you add a new git URL to the system, gittobook will checkout
      the repo, and look for any markdown files
      (<literal>.md</literal>). It will always checkout the master
      branch. The markdown files found are collected into one document,
      which is then transformed using pandoc. You can browse this
      documentation on
      <ulink url="https://github.com/diversen/git-to-book-docs">https://github.com/diversen/git-to-book-docs</ulink>,
      which is the repo used to generate the gittobook docs, and suggest
      edits. This document is just a simple
      <literal>README.md</literal>, which has been transformed by
      pandoc. If you work on a larger book you can just add some
      directories to keep you content better organised. The file
      structure is parsed so that any directories are first examined for
      markdown files, which should end on the <literal>.md</literal>
      extension. The way a directory is listed resembles the way
      <ulink url="http://github.com">http://github.com</ulink> displays
      files, when looking at a repo online.
    </para>
  </sect1>
  <sect1 id="pandoc-config-meta.yaml">
    <title>Pandoc config / meta.yaml</title>
    <para>
      The gittobook will prepend a <literal>meta.yaml</literal> file if
      one is found (for adding meta data to the document - such as
      author, title, cover-image, build commands, etc). In the
      <literal>meta.yaml</literal> you can (and should) specify title,
      author, and other meta info used with pandoc. You can also specify
      build commands used, when pandoc executes the command. You can see
      an example here:
      <ulink url="https://github.com/diversen/git-to-book-docs/blob/master/meta.yaml">https://github.com/diversen/git-to-book-docs/blob/master/meta.yaml</ulink>.
      You will see that the <literal>format-arguments</literal> are
      specific to gittobook, otherwise it is a standard pandoc
      <literal>.yaml file</literal>. The
      <literal>format-arguments</literal> are the command line options
      given to pandoc. You can also add files to
      <literal>ignore-files</literal>, e.g.
      <literal>README.md</literal>.
    </para>
  </sect1>
  <sect1 id="install-local">
    <title>Install local</title>
    <para>
      Requirements:
    </para>
    <itemizedlist>
      <listitem>
        <para>
          Apache2
        </para>
      </listitem>
      <listitem>
        <para>
          php5 &gt;= 5.3
        </para>
      </listitem>
      <listitem>
        <para>
          mysql-server
        </para>
      </listitem>
      <listitem>
        <para>
          pandoc
        </para>
      </listitem>
      <listitem>
        <para>
          texlive-full
        </para>
      </listitem>
    </itemizedlist>
    <para>
      First clone the base system into e.g. yoursite:
    </para>
    <programlisting>
git clone git://github.com/diversen/coscms.git yoursite
</programlisting>
    <para>
      Enter the base system:
    </para>
    <programlisting>
cd yoursite
</programlisting>
    <para>
      Enable apache2 host:
    </para>
    <programlisting>
// you will need to be root
sudo ./coscli.sh apache2 --en yoursite
</programlisting>
    <para>
      Run install command:
    </para>
    <programlisting>
./coscli.sh prompt-install --install
</programlisting>
    <para>
      Ready to install. Select gittobook profile when asked. You will be
      asked about DB configuration, and version to install. Use the
      <literal>latest version</literal> version or try
      <literal>master</literal> (tagged versions are tested and should
      work, while master will work 99% of the time work as well). After
      writing the <literal>config/config.ini</literal> file the system
      will install all the gittobooks profile modules from git repos. At
      last system will prompt you for a super user.
    </para>
    <para>
      Set correct perms for public files after install (e.g. upload
      folder)
    </para>
    <programlisting>
// you will need to be root user as we change
// the perms to be www-data
sudo ./coscli.sh file --chmod-files
</programlisting>
    <para>
      Add a user (will prompt you for an email and a password) - you can
      just use test / test:
    </para>
    <programlisting>
 ./coscli.sh useradd --add
</programlisting>
  </sect1>
  <sect1 id="system-config">
    <title>System config</title>
    <para>
      If you make the above install, then the system is multi user by
      default. But you can make a few configuration changes in order to
      change this. This shows the default <literal>gitbook.ini</literal>
      file which is located in <literal>modules/gitbook</literal>.
    </para>
    <programlisting language="ini">
; who can use it
; user is a user which has signed up - 
; admin is created in the install proces
gitbook_allow = 'user'
; allow these formats to be created by a 'user'
; admin has rights to do what he wants
gitbook_exports = 'epub,html,pdf'
; who is allowed to use the all options in meta.yaml
; the all option means access to using templates
; be careful about this!  
gitbook_meta_allow = 'admin'
; assets allowed for user
gitbook_allow_assets = 'css,jpeg,jpg,png,gif'
</programlisting>
    <para>
      As you see in the above <literal>gitbook</literal> config file.
    </para>
  </sect1>
  <sect1 id="useful-resources">
    <title>Useful Resources</title>
    <para>
      The pandoc markdown.
    </para>
    <para>
      <ulink url="http://johnmacfarlane.net/pandoc/demo/example9/pandocs-markdown.html">http://johnmacfarlane.net/pandoc/demo/example9/pandocs-markdown.html</ulink>
    </para>
    <para>
      Math LaTex:
    </para>
    <para>
      <ulink url="http://en.wikibooks.org/wiki/LaTeX/Mathematics">http://en.wikibooks.org/wiki/LaTeX/Mathematics</ulink>
    </para>
    <para>
      Some Pandoc templates:
    </para>
    <para>
      <ulink url="https://github.com/jgm/pandoc/wiki/User-contributed-templates">https://github.com/jgm/pandoc/wiki/User-contributed-templates</ulink>
    </para>
    <para>
      Test
    </para>
  </sect1>
</chapter>
</article>
